<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ruoyi.business.mapper.SettleSummaryMapper">

    <resultMap type="com.ruoyi.business.domain.SettleSummary" id="SettleSummaryResult">
        <result property="id" column="id"/>
        <result property="contractId" column="contract_id"/>
        <result property="summaryDate" column="summary_date"/>
        <result property="fileDate" column="file_date"/>
        <result property="remark" column="remark"/>
        <result property="createBy" column="create_by"/>
        <result property="createTime" column="create_time"/>
        <result property="updateBy" column="update_by"/>
        <result property="updateTime" column="update_time"/>
        <result property="isDeleted" column="is_deleted"/>
    </resultMap>

    <sql id="selectSettleSummaryVo">
        select id,
               contract_id,
               summary_date,
               file_date,
               remark,
               create_by,
               create_time,
               update_by,
               update_time,
               is_deleted
        from settle_summary
    </sql>

    <select id="selectSettleSummaryList" parameterType="com.ruoyi.business.domain.param.SettleSummarySearchParam"
            resultType="com.ruoyi.business.domain.vo.SeSummaryVo">
        select
        ss.id as id,
        ss.contract_id as contractId,
        ss.create_time as createDate,
        ss.summary_date as summaryDate,
        c.type as type,
        c.contract_name as contractName,
        c.contract_code as contractCode,
        concat(MIN(s.reconciliation_start_date) ,'~',MAX(s.reconciliation_end_date)) as reconciliationPeriod,

        c.purchase_dept_name as purchaseDeptName,
        sup.supplier_name as purchaseSupplierName,
        l.company_name as rentalLesseeName,
        c.rental_dept_name as rentalDeptName,
        c.lending_dept_name as lendingDeptName,
        su.supplier_name as lendingSupplierName,
        c.bailment_dept_name as bailmentDeptName,
        ls.company_name as bailmentLesseeName,
        case c.type when 0 then c.purchase_dept_name
        when 1 then l.company_name
        when 2 then c.lending_dept_name
        when 3 then c.bailment_dept_name
        end as supply_department,

        case c.type when 0 then sup.supplier_name
        when 1 then c.rental_dept_name
        when 2 then su.supplier_name
        when 3 then ls.company_name
        end as collect_department
        from settle_summary ss
        left join contract c on c.id = ss.contract_id
        left join settle_summary_settle sus on sus.settle_summary_id = ss.id
        left join settle s on s.id = sus.settle_id
        left join lessee l on l.id = c.rental_lessee_id
        left join lessee ls on ls.id = c.bailment_lessee_id
        left join supplier sup on sup.id = c.purchase_supplier_id
        left join supplier su on su.id = c.lending_supplier_id
        <where>
            and ss.is_deleted = 0
            <if test="date != null ">
                and DATE_FORMAT(ss.create_time,'%Y-%m') = #{date}
            </if>
            <if test="type != null ">
                and c.type = #{type}
            </if>
            <if test="content != null and content != ''">
                and (c.contract_name like concat('%',#{content},'%')
                or c.contract_code like concat('%',#{content},'%'))
            </if>
        </where>
        group by ss.id,ss.contract_id,ss.create_time,ss.summary_date,c.type,c.contract_name,c.contract_code
        order by ss.create_time
    </select>

    <select id="selectSettleSummaryInfoById" parameterType="Long" resultType="com.ruoyi.business.domain.vo.SettleSumVo">
        select remark, resources
        from settle_summary
        where id = #{id}
    </select>

    <select id="getSettleIdsBySettleSummaryId" parameterType="Long" resultType="Long">
        select sss.settle_id
        from settle_summary ss
        left join settle_summary_settle sss
        on sss.settle_summary_id = ss.id
        where ss.id = #{id}
    </select>

    <insert id="insertSettleSummary" parameterType="com.ruoyi.business.domain.param.SettleSummaryAddParam" useGeneratedKeys="true"
            keyProperty="id">
        insert into settle_summary
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="contractId != null">contract_id,
            </if>
            summary_date,
            <if test="remark != null">remark,
            </if>
            <if test="createBy != null">create_by,
            </if>
            <if test="createTime != null">create_time,
            </if>
            <if test="updateBy != null">update_by,
            </if>
            <if test="updateTime != null">update_time,
            </if>
            <if test="isDeleted != null">is_deleted,
            </if>
            <if test="resources != null">resources,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="contractId != null">#{contractId},
            </if>
            curdate(),
            <if test="remark != null">#{remark},
            </if>
            <if test="createBy != null">#{createBy},
            </if>
            <if test="createTime != null">#{createTime},
            </if>
            <if test="updateBy != null">#{updateBy},
            </if>
            <if test="updateTime != null">#{updateTime},
            </if>
            <if test="isDeleted != null">#{isDeleted},
            </if>
            <if test="resources != null">#{resources},
            </if>
        </trim>
    </insert>

    <insert id="batchSettleInventory">
        insert into settle_summary_settle
        ( id , settle_summary_id , settle_id , create_by , create_time , update_by , update_time , is_deleted ) values
        <foreach item="item" index="index" collection="list" separator=",">
            ( #{item.id
            }, #{item.settleSummaryId
            }, #{item.settleId
            }, #{item.createBy
            }, #{item.createTime
            }, #{item.updateBy
            }, #{item.updateTime
            }, #{item.isDeleted
            })
        </foreach>
    </insert>

    <update id="updateSettleSummary" parameterType="com.ruoyi.business.domain.SettleSummary">
        update settle_summary
        <trim prefix="SET" suffixOverrides=",">
            <if test="remark != null">remark =
                #{remark},
            </if>
            <if test="resources != null">resources =
                #{resources},
            </if>
        </trim>
        where id = #{id}
    </update>

    <delete id="deleteSettleSummaryById" parameterType="Long">
        delete
        from settle_summary
        where id = #{id}
    </delete>

    <delete id="deleteSettleSummaryByIds" parameterType="String">
        delete from settle_summary where id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <delete id="deleteSettleSummarySettle" parameterType="String">
        delete from settle_summary_settle where settle_summary_id in
        <foreach item="id" collection="array" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <select id="getBeforeSummaryByIds" parameterType="String" resultType="com.ruoyi.business.domain.vo.SummaryVo">
        select
        sum(IF(i.stock_type =0,i.lessor_theoretical_weight,0)) as theoreticalInTotal,
        sum(IF(i.stock_type =1,i.lessor_theoretical_weight,0)) as theoreticalOutTotal
        from settle s
        left join settle_inventory si on si.settle_id = s.id
        left join inventory i on i.id = si.inventory_id
        where s.id in
        <foreach item="settleId" collection="array" open="(" separator="," close=")">
            #{settleId}
        </foreach>
        and i.business_date &lt; s.reconciliation_start_date
    </select>
    <select id="summaryByIds" parameterType="String" resultType="com.ruoyi.business.domain.vo.SummaryVo">
        select
        s.id as id,
        concat(s.reconciliation_start_date,'~',s.reconciliation_end_date) as date,
        "盘扣式脚手架" as materialName,
        sum(IF(i.stock_type =0,i.lessor_theoretical_weight,0)) as theoreticalInTotal,
        sum(IF(i.stock_type =1,i.lessor_theoretical_weight,0)) as theoreticalOutTotal,
        s.warehouse_out_total as warehouseOutTotal,
        s.warehouse_in_total as warehouseInTotal,
        s.scene_out_total as sceneOutTotal,
        s.scene_in_total as sceneInTotal,
        i.remark as remark
        from settle s
        left join settle_inventory si on si.settle_id = s.id
        left join inventory i on i.id = si.inventory_id
        left join inventory_detail id on i.id = id.inventory_id
        where s.id in
        <foreach item="settleId" collection="array" open="(" separator="," close=")">
            #{settleId}
        </foreach>
        group by s.id
        order by s.reconciliation_start_date
    </select>
    <select id="getSettleSummaryBaseInfoByIds" resultType="com.ruoyi.business.domain.vo.SettleSumVo">
        select c.id as contractId,
        c.contract_name as contractName,
        c.contract_code as contractCode,
        c.project_name as projectName,
        concat(min(s.reconciliation_start_date),'~',max(s.reconciliation_end_date) ) as date,
        c.signed_date as signedDate,
        c.type as type,
        ss.id as id,
        ss.remark as remark,
        ss.resources as resources,
        c.purchase_dept_name as purchaseDeptName,
        sup.supplier_name as purchaseSupplierName,
        l.company_name as rentalLesseeName,
        c.rental_dept_name as rentalDeptName,
        c.lending_dept_name as lendingDeptName,
        su.supplier_name as lendingSupplierName,
        c.bailment_dept_name as bailmentDeptName,
        ls.company_name as bailmentLesseeName
        from settle s
        left join contract c on s.contract_id = c.id
        left join settle_summary_settle sss on sss.settle_id = s.id
        left join settle_summary ss on ss.id = sss.settle_summary_id
        left join lessee l on l.id = c.rental_lessee_id
        left join lessee ls on ls.id = c.bailment_lessee_id
        left join supplier sup on sup.id = c.purchase_supplier_id
        left join supplier su on su.id = c.lending_supplier_id
        where s.id in
        <foreach item="settleId" collection="array" open="(" separator="," close=")">
            #{settleId}
        </foreach>
        <if test="summaryId != null">
            and ss.id = #{summaryId}
        </if>
        group by c.id
    </select>

    <resultMap id="Detail" type="com.ruoyi.business.domain.vo.SummaryDetailVo">
        <id property="id" column="id"/>
        <result property="warehouseWeight" column="warehouse_weight"/>
        <result property="sceneWeight" column="scene_weight"/>
        <result property="type" column="type"/>
        <collection property="list" javaType="java.util.ArrayList"
                    ofType="com.ruoyi.business.domain.vo.SummaryDetailListVo"
                    select="selectList" column="{type=type,id=id}">
        </collection>
    </resultMap>

    <select id="getSettleDetailList" resultMap="Detail" resultType="com.ruoyi.business.domain.vo.SummaryDetailVo">
        select
               #{id}                   as id,
               #{type}                 as type,
               sum(i.warehouse_weight) as warehouse_weight,
               sum(i.scene_weight)     as scene_weight
        from settle s
                 left join settle_inventory si on si.settle_id = s.id
                 left join inventory i on i.id = si.inventory_id
                 left join inventory_detail id on id.inventory_id = i.id
        where s.id = #{id}
          and i.stock_type = #{type}
    </select>
    <select id="selectList"  resultType="com.ruoyi.business.domain.vo.SummaryDetailListVo">
        select
            concat(s.reconciliation_start_date, '~', s.reconciliation_end_date) as date,
            mc.name as name,
            ms.specs_name as specs_name,
            id.material_quantity as number,
            mc.m_unit as unit,
            IF(em.single_weight,em.single_weight,ms.single_weight) as single_weight,
            (IF(em.single_weight,em.single_weight,ms.single_weight)*id.material_quantity) as weight,
            id.remark as remark
        from settle s
            left join settle_inventory si on si.settle_id = s.id
            left join inventory i on i.id = si.inventory_id
            left join inventory_detail id on id.inventory_id = i.id
            left join material_category mc on mc.id = id.material_category_id
            left join material_specs ms on ms.id = id.material_spec_id
            left join external_material em on em.contract_id = id.external_contract_id
            and em.material_category_id = id.material_category_id
            and id.material_spec_id = em.material_spec_id
        where s.id = #{id}
          and i.stock_type = #{type}
        order by i.business_date
    </select>
    <select id="getOtherFeeById" parameterType="long" resultType="com.ruoyi.business.domain.vo.SummaryDetailListVo">
        select
               mc.name                   as name,
               cb.expense_type            as expenseType,
               f.charged_count      as number,
               mc.m_unit                 as unit,
               f.remark                  as remark
        from settle s
                 left join settle_inventory si on si.settle_id = s.id
                 left join inventory i on i.id = si.inventory_id
                 left join inventory_fee f on f.inventory_id = i.id
                 left join material_category mc on mc.id = f.material_category_id
								 left join contract_billing cb on cb.id = f.fee_id
        where s.id = #{id}
        order by mc.name
    </select>
</mapper>